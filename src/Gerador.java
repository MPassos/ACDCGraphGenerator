/**
 * This aplication is responsible for reading the ACDC output and transform it to a viewable format
 * It reads the graph generated by the STAN4J and the output generated by ACDC.
 * @author Mateus Passos
 * @version 1.0
 */
import java.io.*;
import java.util.*;

public class Gerador {

    private File input;
    private File output;
    private FileReader leitor;
    private FileWriter escritor;
    private FileReader leitor2;
    private BufferedReader lbuffer;
    private BufferedReader lbuffer2;
    private BufferedWriter ebuffer;
    private String nomearquivo;
    private Vector no;
    private Vector dependencias;
    private Vector cluster;

    /**
    * Class constructor
    * @param input the input file that will be analysed
    * @param output the output file that will be also analysed
    * @param nomearquivo contains the name of output file generated by the tool
    * @throws IOException
    */
    public Gerador(File input, File output, String nomearquivo) throws IOException {
        this.input = input;
        this.output = output;

        try {
            leitor = new FileReader(this.input);
            leitor2 = new FileReader(this.output);
            escritor = new FileWriter(nomearquivo);
            lbuffer = new BufferedReader(leitor);
            lbuffer2 = new BufferedReader(leitor2);
            ebuffer = new BufferedWriter(escritor);
        } catch (IOException e) {
            System.out.println("Arquivo nÃ£o encontrado!" + e);
        }
    }

    /**
     * This method is responsible for reading the input file and gather all of the
     * graph dependencies disregarding the weight
     * @throws IOException 
     */
    public void getDependencias() throws IOException {
        no = new Vector(10, 1);
        dependencias = new Vector(10, 1);
        Node node = new Node("", "");
        String nomedono = "";
        int c = -1;
        char ch;
        while (lbuffer.ready()) {
            while (c != 35) {
                /**
                 * The input file is subdivided into two sections
                 * that are seperated by the # character
                 */
                c = lbuffer.read();
                /**
                 * Ignore numbers and space
                 */
                if ((c >= 48 && c <= 57) || c == 32) {
                    continue;
                }
                /**
                 * When the character read is a \n
                 * A new node is added to the Vector
                 */
                if (c == 13) {
                    no.add(nomedono);
                    nomedono = "";
                    continue;
                }
                /**
                 * Ignores carriage returns
                 */
                if (c == 10) {
                    continue;
                }
                ch = (char) c;
                nomedono += Character.toString(ch);
            }
            nomedono = "";
            lbuffer.readLine();

            while (c != -1) {
                c = lbuffer.read();

                if (c == 32) {
                    if (node.getNode().equals("")) {
                        node.setNode((String) no.get(Integer.parseInt(nomedono) - 1));
                    } else {
                        node.setDepends((String) no.get(Integer.parseInt(nomedono) - 1));
                    }
                    nomedono = "";
                    continue;
                }

                if (c == 13) {
                    dependencias.add(node);
                    node = new Node("", "");
                    nomedono = "";
                    continue;
                }

                if (c == 10) {
                    continue;
                }
                ch = (char) c;
                nomedono += Character.toString(ch);
            }
        }
    }
    /**
     * This method creates the .dot output file that generates the visual representation of the graph read on the input file
     * @throws IOException 
     */
    public void gerarGrafo() throws IOException {
        int size = no.size();
        ebuffer.write("digraph G {\n" + "size= \"" + size + "," + size + "\";\n" + "rotate = 180;\n");

        for (int i = 0; i < no.size(); i++) {
            ebuffer.write("\"" + no.get(i) + "\"" + "[label=" + "\"" + no.get(i) + "\"" + ",shape=ellipse,color=red,fontcolor=black,style=\"\"];\n");
        }

        for (int i = 0; i < dependencias.size(); i++) {
            Node aux = (Node) dependencias.get(i);

            ebuffer.write("\"" + aux.getNode() + "\"" + " -> " + "\"" + aux.getDepends() + "\" " + "[color=red,font=6];\n");
        }
        ebuffer.write("}");
        ebuffer.close();
    }
    
    /**
     * This method reads the output file and stores the clusters and it's elements
     * @throws IOException 
     */
    public void getCluster() throws IOException {
        Vector clusterelements = new Vector(10, 1);
        cluster = new Vector(10, 1);
        String aux = "";
        String clustername = "";
        int status = -1; //If status is 1 we are dealing with the same cluster, if 0 it changed
        int c = -1;
        char ch;

        while (lbuffer2.ready()) {
            c = lbuffer2.read();

            if (c == 32)//Space 
            {
                if (aux.equals("contain")) {
                    //System.out.println("1");
                    aux = "";
                    continue;
                }
                if (aux.equals(clustername)) {
                    //System.out.println("2");
                    aux = "";
                    status = 1;
                    continue;
                } else if (!clustername.equals("")) {
                    //System.out.println("3");
                    Cluster novo = new Cluster(clustername);
                    novo.setElements(clusterelements);
                    cluster.add(novo);
                    clusterelements.removeAllElements();
                    clustername = aux;
                    status = 0;
                    aux = "";
                    continue;
                } else {
                    //System.out.println("4");
                    clustername = aux;
                    aux = "";
                    continue;
                }
            }

            if (c == 13)// \n
            {
                //System.out.println("5");
                clusterelements.add(aux);
                aux = "";
                continue;
            }

            if (c == 10) { // ENTER
                continue;
            }

            ch = (char) c;
            aux += Character.toString(ch);
        }

        Cluster novo = new Cluster(clustername);
        novo.setElements(clusterelements);
        cluster.add(novo);
        clusterelements.removeAllElements();

        for (int i = 0; i < cluster.size(); i++) {
            Cluster teste;
            teste = (Cluster) cluster.get(i);
            for (int j = 0; j < teste.getElements().size(); j++) {
                System.out.println(teste.getClustername() + " " + teste.getElements().get(j));
            }
        }
    }
    /**
     * This method generates the .dot file that will generate the visual representation of the graph
     * along with clusters delimitation. 
     * @throws IOException 
     */
    public void gerarCluster() throws IOException {
        int size = no.size();
        ebuffer.write("digraph G {\n" + "size= \"" + size + "," + size + "\";\n" + "rotate = 180;\n");

        for (int i = 0; i < cluster.size(); i++) {
            Cluster aux;
            aux = (Cluster) cluster.get(i);
            ebuffer.write("\nsubgraph cluster" + i + "{\nlabel = \"" + aux.getClustername() + "\";\ncolor = black;\nstyle = bold;\n\n");
            for (int j = 0; j < aux.getElements().size(); j++) {
               ebuffer.write("\"" + aux.getElements().get(j) + "\"" + "[label=" + "\"" + aux.getElements().get(j) + "\"" + ",shape=ellipse,color=red,fontcolor=black,style=\"\"];\n"); 
            }
            ebuffer.write("}\n");
        }

        for (int i = 0; i < dependencias.size(); i++) {
            Node aux = (Node) dependencias.get(i);

            ebuffer.write("\"" + aux.getNode() + "\"" + " -> " + "\"" + aux.getDepends() + "\" " + "[color=red,font=6];\n");
        }
        ebuffer.write("}");
        ebuffer.close();
    }
}
/**/
